priority 0

global !p
def fullpath():
	return os.getcwd() + "/" + path

def find_namespace(snip):
	fp = fullpath()
	if "/include/" in fp:
		folder = "include"
	elif "/src/" in fp:
		folder = "src"
	else:
		return snip.basename or "name"
	
	return re.sub(r'.*/{}/(.*?)/.*'.format(folder), '\\1', fullpath())
endglobal


snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	public:
		${1/(\w+).*/$1/}(${2:arguments});
		${3:virtual }~${1/(\w+).*/$1/}();

	private:
		${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace ${1:`!p snip.rv = find_namespace(snip)`}
{
	${VISUAL}${0}
}
endsnippet

snippet range "begin(), end() header"
auto begin() const -> ${1:container}::const_iterator;
auto begin()       -> $1::iterator;
auto end() const   -> $1::const_iterator;
auto end()         -> $1::iterator;
endsnippet

snippet rangeimpl "begin(), end() implementation"
${1:container}::const_iterator ${2:class}::begin() const
{
	return ${3:container}.begin();
}

$1::iterator $2::begin()
{
	return $3.begin();
}

$1::const_iterator $2::end() const
{
	return $3.end();
}

$1::iterator $2::end()
{
	return $3.end();
}
endsnippet

snippet ifdeflinux "#ifdef __linux__"
#ifdef __linux__
	${VISUAL}${0}
#endif
endsnippet

snippet ifdefwin "#ifdef _WIN32"
#ifdef _WIN32
	${VISUAL}${0}
#endif
endsnippet

snippet ifdefos "#ifdef switch for windows, linux, and others"
#ifdef __linux__
	// linux code goes here
#elif _WIN32
	// windows code goes here
#else

#endif
endsnippet

snippet header "Include guards + namespace"
#ifndef ${2/.*/\U$0\E/}_${1:`!p
snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper() if not snip.c else snip.c`}
#define ${2/.*/\U$0\E/}_$1

namespace ${2:`!p snip.rv = find_namespace(snip)`}
{
	${VISUAL}${0}
}

#endif
endsnippet

snippet src "Include + namespace"
#include "${1:`!p
if snip.c:
	snip.rv = snip.c
elif "/src/" in fullpath():
	snip.rv = re.sub(r'.*/src/(.*)' + snip.fn,'\\1', fullpath())
else:
	snip.rv = ""
`}`!p snip.rv = snip.basename`.hpp"

namespace ${2:`!p snip.rv = find_namespace(snip)`}
{
	${VISUAL}${0}
}
endsnippet

snippet fori "for (int i = 0; ...) "
for (int i = 0; i < ${1}; ++i)
	${0}
endsnippet

snippet fore "for (auto& i : container) "
for (auto& i : ${1})
	${0}
endsnippet

snippet forit "for (auto it = begin(), end = end(); ...)"
for (auto it = ${1}.begin(), end = $1.end(); it != end; ++it)
	${0}
endsnippet

snippet sc "static_cast<>()" w
static_cast<${1}>(${0})
endsnippet

snippet opbool "operator bool"
explicit operator bool() const
{
	${0}
}
endsnippet

snippet op* "operator*()"
auto operator*() const -> ${1:T}&
{
	${0}
}
endsnippet

snippet op-> "operator->()"
auto operator->() const -> ${1:T}*
{
	${0}
}
endsnippet
