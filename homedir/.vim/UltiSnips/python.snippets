priority 10

global !p

import px.snippets

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'

class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		self.name = arg.split('=')[0].strip()

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg

def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']

	return args

def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

endglobal

snippet init "def __init__" b
def __init__(self$1):`!p
args = get_args(t[1])
for arg in args:
	val = str(arg).split(":", 1)[0]
	snip += "    self._%s = %s" % (arg, val)`
${0}
endsnippet

snippet main "main" b
import sys


def main() -> int:
	${0}
	return 0


if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	sys.exit(main())
endsnippet

snippet maincustom "custom main" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:${VISUAL:main()}}
endsnippet

snippet doc "docstring" b
"""${1}"""
endsnippet

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
$0
endsnippet

snippet argparse "argparse setup"
import argparse
parser = argparse.ArgumentParser(description="description")
parser.add_argument("argument", help="argument help")
parser.add_argument("-a", "--argument", help="argument help")
parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
args = parser.parse_args()
endsnippet

snippet logging "logging setup"
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
endsnippet

snippet logging_file "logging setup"
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s",
					filename="log.txt", filemode="a")
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.INFO)
logging.root.addHandler(handler)
endsnippet

snippet logging_fancy "fancy logging setup"
def setup_logger(level=logging.DEBUG):
	class MyFormatter(logging.Formatter):
		def format(self, record):
			if record.levelno in (logging.DEBUG, logging.INFO):
				self._style._fmt = "%(message)s"  # pylint: disable=protected-access
			else:
				self._style._fmt = "%(levelname)s: %(message)s"  # pylint: disable=protected-access
			return logging.Formatter.format(self, record)

	hdlr = logging.StreamHandler(sys.stdout)
	hdlr.setFormatter(MyFormatter())
	logging.root.addHandler(hdlr)
	logging.root.setLevel(level)
endsnippet

snippet namedtuple "namedtuple"
${1} = namedtuple("$1", [ ${0} ])
endsnippet

snippet prop "property" m
@property
def ${1}(self):
	return self._$1

@$1.setter
def $1(self, value):
	self._$1 = value
${0}
endsnippet


# post_jump "px.snippets.expand(snip)"
snippet cl "class with init" m
class ${1:ClassName}:
	def __init__(self$2):`!p
args = get_args(t[3])
for arg in args:
	snip += "        self._%s = %s" % (arg, arg)`
${0}
endsnippet

snippet dec "decorator"
def ${1}(func):
	@functools.wraps(func)
	def wrapper(*args, **kwargs):
		${2:# TODO}
		return func(*args, **kwargs)
	return wrapper
${0}
endsnippet

snippet open "with open ..." m
with open(${1:fname}, "${2:r}") as f:
	${0}
endsnippet

snippet timeit "timeit decorator" m
def timeit(method):
	import time

	def timed(*args, **kw):
		ts = time.time()
		result = method(*args, **kw)
		te = time.time()
		print('%r  %2.2f ms' % (method.__name__, (te - ts) * 1000))
		return result
	return timed
endsnippet

snippet oscheck "Check operating system type"
if sys.platform in ("linux", "linux2"):
	pass  # linux
elif sys.platform == "darwin":
	pass  # OS X
elif sys.platform == "win32":
	pass  # Windows...
endsnippet

snippet profile "cProfile decorator"
def profile(method):
	import cProfile

	def profiled(*args, **kwargs):
		cp = cProfile.Profile()
		cp.enable()
		res = method(*args, **kwargs)
		cp.disable()
		cp.print_stats()
		return res
	return profiled

endsnippet

snippet mypy_ignore "Inline ignore comment"
type: ignore[${1:${VISUAL:code}}]
endsnippet

snippet np "import numpy as np"
import numpy as np
endsnippet

snippet plt "from matplotlib import pyplot as plt"
from matplotlib import pyplot as plt
endsnippet

snippet pd "import pandas as pd"
import pandas as pd
endsnippet
